/* This module converts a user specified coordinates into a memory address.
 * The output of the module depends on the resolution set by the user.
 */
module criptography(data_memory, vga_datain);

	input [31:0] data_memory; 
	output reg [7:0] vga_datain; 

	/* The basic formula is address = y*WIDTH + x;
	 * For 320x240 resolution we can write 320 as (256 + 64). Memory address becomes
	 * (y*256) + (y*64) + x;
	 * This simplifies multiplication a simple shift and add operation.
	 * A leading 0 bit is added to each operand to ensure that they are treated as unsigned
	 * inputs. By default the use a '+' operator will generate a signed adder.
	 * Similarly, for 160x120 resolution we write 160 as 128+32.
	 */
	
	always @(*)
	begin
		vga_datain = data_memory
	end
	
	
	

reg [1:0] cont;

always @(*)
	begin 
		if(cont == 3'd0) begin
			cont <= 3'd1;
			VGA_value = data_mem[7:0];
		end
		else if (cont == 3'd1) begin
			cont <= 3'd2;
			VGA_value = data_mem[15:8];
		end
		else if (cont == 3'd2) begin
			cont <= 3'd3;
			VGA_value = data_mem[23:16];
		end
		
		else if(cont == 3'd3) begin
			cont <= 3'd0;
			VGA_value = data_mem[31:24];
		end
	end
	
endmodule